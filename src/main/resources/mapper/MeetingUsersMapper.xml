<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.meeting.meeting_server.mapper.MeetingUsersMapper">
  <resultMap id="BaseResultMap" type="com.meeting.meeting_server.domain.MeetingUsers">
    <!--@mbg.generated-->
    <!--@Table meeting_users-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="open_id" jdbcType="VARCHAR" property="openId" />
    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="role" jdbcType="VARCHAR" property="role" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="is_register" jdbcType="BIT" property="isRegister" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, user_name, open_id, mobile, `role`, `password`, is_register
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from meeting_users
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbg.generated-->
    delete from meeting_users
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.meeting.meeting_server.domain.MeetingUsers" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into meeting_users (user_name, open_id, mobile, 
      `role`, `password`, is_register
      )
    values (#{userName,jdbcType=VARCHAR}, #{openId,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, 
      #{role,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{isRegister,jdbcType=BIT}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.meeting.meeting_server.domain.MeetingUsers" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into meeting_users
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userName != null">
        user_name,
      </if>
      <if test="openId != null">
        open_id,
      </if>
      <if test="mobile != null">
        mobile,
      </if>
      <if test="role != null">
        `role`,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="isRegister != null">
        is_register,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="openId != null">
        #{openId,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        #{role,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="isRegister != null">
        #{isRegister,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.meeting.meeting_server.domain.MeetingUsers">
    <!--@mbg.generated-->
    update meeting_users
    <set>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="openId != null">
        open_id = #{openId,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        `role` = #{role,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="isRegister != null">
        is_register = #{isRegister,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.meeting.meeting_server.domain.MeetingUsers">
    <!--@mbg.generated-->
    update meeting_users
    set user_name = #{userName,jdbcType=VARCHAR},
      open_id = #{openId,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      `role` = #{role,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=VARCHAR},
      is_register = #{isRegister,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>